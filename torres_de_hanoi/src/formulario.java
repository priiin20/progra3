/*
 *Karen Roxana Roldan Hernandez
    0901-17-63
programa creado para realizar el juego de las torres de Hanoi
 */
import static javafx.application.Platform.exit;
 import javax.swing.JDialog;
 import javax.swing.JOptionPane;
 import javax.swing.SwingConstants;
 import javax.swing.table.DefaultTableCellRenderer;
 import javax.swing.table.DefaultTableModel;


public class formulario extends javax.swing.JFrame {

    int ContNumMov = 0;
    Pila PilaTorreA;
    Pila PilaTorreB;
    Pila PilaTorreC;
    
    DefaultTableModel ModeloTablaTorreA, ModeloTablaTorreB, ModeloTablaTorreC; // se crea para que se actualiza
    
    int Objetivo = 0;
    double NumMinMov = 0;
    boolean Stop= false;
    
    public formulario() {
        initComponents();
        // permite centrar los datos que seran mostrados en las tablas 
        ModeloTablaTorreA = (DefaultTableModel) JT_TorreA.getModel();  
        ModeloTablaTorreA.setRowCount(10);
        
        ModeloTablaTorreB = (DefaultTableModel) JT_TorreB.getModel();
        ModeloTablaTorreB.setRowCount(10);
        
        ModeloTablaTorreC = (DefaultTableModel) JT_TorreC.getModel();
        ModeloTablaTorreC.setRowCount(10);
        
        DefaultTableCellRenderer renderA = new DefaultTableCellRenderer();// alinea los datos mostrados en pantalla
        renderA.setHorizontalAlignment(SwingConstants.CENTER);
        JT_TorreA.getColumnModel().getColumn(0).setCellRenderer(renderA);// solo posee una solo columna
        
        DefaultTableCellRenderer renderB = new DefaultTableCellRenderer();
        renderB.setHorizontalAlignment(SwingConstants.CENTER);
        JT_TorreB.getColumnModel().getColumn(0).setCellRenderer(renderB);
        
        DefaultTableCellRenderer renderC = new DefaultTableCellRenderer();
        renderC.setHorizontalAlignment(SwingConstants.CENTER);
        JT_TorreC.getColumnModel().getColumn(0).setCellRenderer(renderC);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
   
     private void Limpiar()
    {
        ContNumMov = 0;
        NumMinMov= 0;
        
        Txt_disco.setText(String.valueOf(Objetivo));
        
    }
     
     private void PrensentaCantMov()
     {
         ContNumMov ++;
        Lb_NumeroMov.setText(String.valueOf(ContNumMov));
     }
     
     
     private void Reiniciar()
     {
         try{
             
             if(!Lb_MinMov.getText().equals(""))
             {
                 Limpiar();
                 Iniciar();
             }
             
         }catch(Exception E)
         {
             System.out.println("Error: "+E.getMessage());
         }
         
     }
     
     private void Iniciar()
     {
         try
         {
             
        PilaTorreA = new Pila();
        PilaTorreB = new Pila();
        PilaTorreC = new Pila();
        
        Objetivo = Integer.parseInt(Txt_disco.getText().toString());
        
       NumMinMov = Math.pow(2,Objetivo)-1;
       
       Lb_NumeroMov.setText(String.valueOf(ContNumMov));
       
       Lb_MinMov.setText(String.valueOf(String.format("%.0f",NumMinMov)));
       
       
       
       for( int x = Objetivo; x>= 1; x--)
       {
           Nodo Plataforma = new Nodo();
           String Disco = "";
           for(int y =x ; y > 0;  y--)
           {
               Disco+= "O";
           }
           Plataforma.setDato(Disco);
           PilaTorreA.Push(Plataforma);
           
       }
       
       PresentarTorreA();
       PresentarTorreB();
       PresentarTorreC();
       
             
         }catch(Exception E)
         {
             System.out.println("Error: "+E.getMessage());
         }
         
     }
     
     
     private  void PresentarTorreA()
     {
         ((DefaultTableModel)JT_TorreA.getModel()).setRowCount(0);//Borramos y asignamos de nuevo las 10 filas a las tabla
         
         ModeloTablaTorreA.setRowCount(10);
         
         Nodo K;// para que me ayude a recorrer y presentar la nueva torre
         
         int RowDisco= (10-PilaTorreA.getContNodo());// ayuda a saber donde empezar a dibujar la torre
         
         
         if(PilaTorreA.getContNodo()> 0)
         {
             for(K= PilaTorreA.getCabeza(); K.getAbajo() != null; K= K.getAbajo())
             {
                 String [] VectorNormal = {K.getDato()};// obtener el disco actul de la pila
                 ModeloTablaTorreA.insertRow(RowDisco, VectorNormal);
                 RowDisco++;
             }
             if(K.getAbajo()== null)
             {
                 String[] VectorNormal= {K.getDato()};
                 ModeloTablaTorreA.insertRow(RowDisco, VectorNormal);
             }
              // para enseñar los datos en las tablas
              
              if(K.getAbajo()== null)
              {
                  String[] VectorNormal= {K.getDato()};
                  ModeloTablaTorreA.insertRow(RowDisco, VectorNormal);
              }
             
         }
         JT_TorreA.setModel(ModeloTablaTorreA);
         ModeloTablaTorreA.setRowCount(10);
         
           
     }
     
     private  void PresentarTorreB()
     {
         ((DefaultTableModel)JT_TorreB.getModel()).setRowCount(0);//Borramos y asignamos de nuevo las 10 filas a las tabla
         
         ModeloTablaTorreB.setRowCount(10);
         
         Nodo K;// para que me ayude a recorrer y presentar la nueva torre
         
         int RowDisco= (10-PilaTorreB.getContNodo());// ayuda a saber donde empezar a dibujar la torre
         
         
         if(PilaTorreB.getContNodo()> 0)
         {
             for(K= PilaTorreB.getCabeza(); K.getAbajo() != null; K= K.getAbajo())
             {
                 String [] VectorNormal = {K.getDato()};// obtener el disco actul de la pila
                 ModeloTablaTorreB.insertRow(RowDisco, VectorNormal);
                 RowDisco++;
             }
             if(K.getAbajo()== null)
             {
                 String[] VectorNormal= {K.getDato()};
                 ModeloTablaTorreB.insertRow(RowDisco, VectorNormal);
             }
              // para enseñar los datos en las tablas
              
              if(K.getAbajo()== null)
              {
                  String[] VectorNormal= {K.getDato()};
                  ModeloTablaTorreB.insertRow(RowDisco, VectorNormal);
              }
             
         }
         JT_TorreB.setModel(ModeloTablaTorreB);
         ModeloTablaTorreB.setRowCount(10);
         
           
     }
     
     private  void PresentarTorreC()
     {
         ((DefaultTableModel)JT_TorreC.getModel()).setRowCount(0);//Borramos y asignamos de nuevo las 10 filas a las tabla
         
         ModeloTablaTorreC.setRowCount(10);
         
         Nodo K;// para que me ayude a recorrer y presentar la nueva torre
         
         int RowDisco= (10-PilaTorreC.getContNodo());// ayuda a saber donde empezar a dibujar la torre
         
         
         if(PilaTorreC.getContNodo()> 0)
         {
             for(K= PilaTorreC.getCabeza(); K.getAbajo() != null; K= K.getAbajo())
             {
                 String [] VectorNormal = {K.getDato()};// obtener el disco actul de la pila
                 ModeloTablaTorreC.insertRow(RowDisco, VectorNormal);
                 RowDisco++;
             }
             if(K.getAbajo()== null)
             {
                 String[] VectorNormal= {K.getDato()};
                 ModeloTablaTorreC.insertRow(RowDisco, VectorNormal);
             }
              // para enseñar los datos en las tablas
              
              if(K.getAbajo()== null)
              {
                  String[] VectorNormal= {K.getDato()};
                  ModeloTablaTorreC.insertRow(RowDisco, VectorNormal);
              }
             
         }
         JT_TorreC.setModel(ModeloTablaTorreC);
         ModeloTablaTorreC.setRowCount(10);
         
           
     }
    
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JT_TorreB = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        JT_TorreA = new javax.swing.JTable();
        But_B_torreA = new javax.swing.JButton();
        But_c_torreA = new javax.swing.JButton();
        But_A_torreB = new javax.swing.JButton();
        But_C_torreB = new javax.swing.JButton();
        But_A_torreC = new javax.swing.JButton();
        But_B_torreC = new javax.swing.JButton();
        Txt_disco = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Lb_MinMov = new javax.swing.JLabel();
        Lb_NumeroMov = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Bt_reiniciar = new javax.swing.JButton();
        B_iniciar = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        JT_TorreC = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        JT_TorreB.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        JT_TorreB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TORRE B"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JT_TorreB.setAutoscrolls(false);
        JT_TorreB.setFocusable(false);
        JT_TorreB.setRowSelectionAllowed(false);
        JT_TorreB.setShowHorizontalLines(false);
        JT_TorreB.setShowVerticalLines(false);
        jScrollPane1.setViewportView(JT_TorreB);
        if (JT_TorreB.getColumnModel().getColumnCount() > 0) {
            JT_TorreB.getColumnModel().getColumn(0).setResizable(false);
        }

        JT_TorreA.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        JT_TorreA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TORRE A"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JT_TorreA.setAutoscrolls(false);
        JT_TorreA.setFocusable(false);
        JT_TorreA.setRowSelectionAllowed(false);
        JT_TorreA.setShowHorizontalLines(false);
        JT_TorreA.setShowVerticalLines(false);
        JT_TorreA.setVerifyInputWhenFocusTarget(false);
        jScrollPane3.setViewportView(JT_TorreA);
        if (JT_TorreA.getColumnModel().getColumnCount() > 0) {
            JT_TorreA.getColumnModel().getColumn(0).setResizable(false);
        }
        JT_TorreA.getAccessibleContext().setAccessibleName("");
        JT_TorreA.getAccessibleContext().setAccessibleDescription("");

        But_B_torreA.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        But_B_torreA.setText("B");
        But_B_torreA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_B_torreAActionPerformed(evt);
            }
        });

        But_c_torreA.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        But_c_torreA.setText("C");
        But_c_torreA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_c_torreAActionPerformed(evt);
            }
        });

        But_A_torreB.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        But_A_torreB.setText("A");
        But_A_torreB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_A_torreBActionPerformed(evt);
            }
        });

        But_C_torreB.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        But_C_torreB.setText("C");
        But_C_torreB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_C_torreBActionPerformed(evt);
            }
        });

        But_A_torreC.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        But_A_torreC.setText("A");
        But_A_torreC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_A_torreCActionPerformed(evt);
            }
        });

        But_B_torreC.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        But_B_torreC.setText("B");
        But_B_torreC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_B_torreCActionPerformed(evt);
            }
        });

        Txt_disco.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        jLabel1.setText("Numero de Discos:");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        jLabel2.setText("Movimientos minimos");

        Lb_MinMov.setBackground(new java.awt.Color(204, 204, 255));
        Lb_MinMov.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        Lb_MinMov.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Lb_MinMov.setOpaque(true);

        Lb_NumeroMov.setBackground(new java.awt.Color(204, 204, 255));
        Lb_NumeroMov.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        Lb_NumeroMov.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Lb_NumeroMov.setOpaque(true);

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        jLabel5.setText("Numero de movimientos:");

        Bt_reiniciar.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        Bt_reiniciar.setText("Reiniciar");
        Bt_reiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bt_reiniciarActionPerformed(evt);
            }
        });

        B_iniciar.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        B_iniciar.setText("Iniciar");
        B_iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_iniciarActionPerformed(evt);
            }
        });

        JT_TorreC.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        JT_TorreC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TORRE C"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JT_TorreC.setAutoscrolls(false);
        JT_TorreC.setFocusable(false);
        JT_TorreC.setRowSelectionAllowed(false);
        JT_TorreC.setShowHorizontalLines(false);
        JT_TorreC.setShowVerticalLines(false);
        jScrollPane4.setViewportView(JT_TorreC);
        if (JT_TorreC.getColumnModel().getColumnCount() > 0) {
            JT_TorreC.getColumnModel().getColumn(0).setResizable(false);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(Lb_NumeroMov, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Lb_MinMov, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Txt_disco, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(82, 82, 82)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Bt_reiniciar, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(B_iniciar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(But_B_torreA)
                                .addGap(18, 18, 18)
                                .addComponent(But_c_torreA))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(But_A_torreB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(But_C_torreB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(But_A_torreC)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(But_B_torreC)
                                .addGap(36, 36, 36)))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(But_B_torreA)
                    .addComponent(But_c_torreA)
                    .addComponent(But_A_torreB)
                    .addComponent(But_C_torreB)
                    .addComponent(But_A_torreC)
                    .addComponent(But_B_torreC))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(Txt_disco, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(B_iniciar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Bt_reiniciar)
                        .addGap(68, 68, 68))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Lb_MinMov, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Lb_NumeroMov, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(26, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void B_iniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_iniciarActionPerformed
      
        Iniciar();
    }//GEN-LAST:event_B_iniciarActionPerformed

    private void Bt_reiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bt_reiniciarActionPerformed
        Reiniciar();
    }//GEN-LAST:event_Bt_reiniciarActionPerformed

    
    private void moverdeA_B()
    {
        try{
            
            if(PilaTorreA.getContNodo()>0)
            {
                Nodo Plataforma = new Nodo (); //tomamos el valor de la cima
                Plataforma.setDato(PilaTorreA.Peek());
                
                if(PilaTorreB.getContNodo()> 0)// si hay elementos en la ila torre B
                {
                    if(Plataforma.getDato().compareTo(PilaTorreB.Peek())>0)// compara la cima con la torre B si es mayor en la torre b
                    {
                        return;
                    }
                }
                PilaTorreA.Pop();
                PilaTorreB.Push(Plataforma);
               
                PresentarTorreA();
                PresentarTorreB();
                PrensentaCantMov();
                
            }
            
        }catch(Exception E)
        {
            System.out.print("Error: "+E.getMessage());
        }
    }
    private void But_B_torreAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_B_torreAActionPerformed
        moverdeA_B();
    }//GEN-LAST:event_But_B_torreAActionPerformed

    private void moverA_C()
    {
       try{
            
            if(PilaTorreA.getContNodo()>0)
            {
                Nodo Plataforma = new Nodo (); //tomamos el valor de la cima
                Plataforma.setDato(PilaTorreA.Peek());
                
                if(PilaTorreC.getContNodo()> 0)// si hay elementos en la ila torre B
                {
                    if(Plataforma.getDato().compareTo(PilaTorreC.Peek())>0)// compara la cima con la torre B si es mayor en la torre b
                    {
                        return;
                    }
                }
                PilaTorreA.Pop();
                PilaTorreC.Push(Plataforma);
               
                PresentarTorreA();
                PresentarTorreC();
                PrensentaCantMov();
                
                if( PilaTorreC.getContNodo()==Objetivo && ContNumMov == NumMinMov)
                {
                    JOptionPane.showMessageDialog(null," FELICIDADES, OBJETIVOS MINIMOS DE MOVIMIENTOS");
                    
                }else if( PilaTorreC.getContNodo()== Objetivo && ContNumMov != NumMinMov)
                {
                   JOptionPane.showMessageDialog(null," FELICIDADES, Lo has resuelto Intenta de nuevo"); 
                }
                
            }
            
        }catch(Exception E)
        {
            System.out.print("Error: "+E.getMessage());
        } 
    }
    
    private void But_c_torreAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_c_torreAActionPerformed
       moverA_C();
    }//GEN-LAST:event_But_c_torreAActionPerformed

    
   private void moverB_A()
    {
          try{
            
            if(PilaTorreB.getContNodo()>0)
            {
                Nodo Plataforma = new Nodo (); //tomamos el valor de la cima
                Plataforma.setDato(PilaTorreB.Peek());
                
                if(PilaTorreA.getContNodo()> 0)// si hay elementos en la ila torre B
                {
                    if(Plataforma.getDato().compareTo(PilaTorreA.Peek())>0)// compara la cima con la torre B si es mayor en la torre b
                    {
                        return;
                    }
                }
                PilaTorreB.Pop();
                PilaTorreA.Push(Plataforma);
               
                PresentarTorreA();
                PresentarTorreB();
                PrensentaCantMov();
                
            }
            
        }catch(Exception E)
        {
            System.out.print("Error: "+E.getMessage());
        }
        
        
    }
    private void But_A_torreBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_A_torreBActionPerformed
        moverB_A();
    }//GEN-LAST:event_But_A_torreBActionPerformed

    private void moverB_C()
    {
               try{
            
            if(PilaTorreB.getContNodo()>0)
            {
                Nodo Plataforma = new Nodo (); //tomamos el valor de la cima
                Plataforma.setDato(PilaTorreB.Peek());
                
                if(PilaTorreC.getContNodo()> 0)// si hay elementos en la ila torre B
                {
                    if(Plataforma.getDato().compareTo(PilaTorreC.Peek())>0)// compara la cima con la torre B si es mayor en la torre b
                    {
                        return;
                    }
                }
                PilaTorreB.Pop();
                PilaTorreC.Push(Plataforma);
               
                PresentarTorreB();
                PresentarTorreC();
                PrensentaCantMov();
                
                if( PilaTorreC.getContNodo()==Objetivo && ContNumMov == NumMinMov)
                {
                    JOptionPane.showMessageDialog(null," FELICIDADES, OBJETIVOS MINIMOS DE MOVIMIENTOS");
                    
                }else if( PilaTorreC.getContNodo()== Objetivo && ContNumMov != NumMinMov)
                {
                   JOptionPane.showMessageDialog(null," FELICIDADES, Lo has resuelto Intenta de nuevo"); 
                }
                
            }
            
        }catch(Exception E)
        {
            System.out.print("Error: "+E.getMessage());
        } 
        
    }
    
    private void But_C_torreBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_C_torreBActionPerformed
        moverB_C();
    }//GEN-LAST:event_But_C_torreBActionPerformed

    
    private void moverC_A()
    {
        try{
            
            if(PilaTorreC.getContNodo()>0)
            {
                Nodo Plataforma = new Nodo (); //tomamos el valor de la cima
                Plataforma.setDato(PilaTorreC.Peek());
                
                if(PilaTorreA.getContNodo()> 0)// si hay elementos en la ila torre B
                {
                    if(Plataforma.getDato().compareTo(PilaTorreA.Peek())>0)// compara la cima con la torre B si es mayor en la torre b
                    {
                        return;
                    }
                }
                PilaTorreC.Pop();
                PilaTorreA.Push(Plataforma);
               
                PresentarTorreA();
                PresentarTorreC();
                PrensentaCantMov();
                
            }
            
        }catch(Exception E)
        {
            System.out.print("Error: "+E.getMessage());
        }
        
        
    }
    private void But_A_torreCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_A_torreCActionPerformed
        moverC_A();
    }//GEN-LAST:event_But_A_torreCActionPerformed

    
    private void moverC_B(){
        try{
            
            if(PilaTorreC.getContNodo()>0)
            {
                Nodo Plataforma = new Nodo (); //tomamos el valor de la cima
                Plataforma.setDato(PilaTorreC.Peek());
                
                if(PilaTorreB.getContNodo()> 0)// si hay elementos en la ila torre B
                {
                    if(Plataforma.getDato().compareTo(PilaTorreB.Peek())>0)// compara la cima con la torre B si es mayor en la torre b
                    {
                        return;
                    }
                }
                PilaTorreC.Pop();
                PilaTorreB.Push(Plataforma);
               
                PresentarTorreB();
                PresentarTorreC();
                PrensentaCantMov();
                
            }
            
        }catch(Exception E)
        {
            System.out.print("Error: "+E.getMessage());
        }
        
    }
    
    private void But_B_torreCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_B_torreCActionPerformed
        moverC_B();
    }//GEN-LAST:event_But_B_torreCActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new formulario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton B_iniciar;
    private javax.swing.JButton Bt_reiniciar;
    private javax.swing.JButton But_A_torreB;
    private javax.swing.JButton But_A_torreC;
    private javax.swing.JButton But_B_torreA;
    private javax.swing.JButton But_B_torreC;
    private javax.swing.JButton But_C_torreB;
    private javax.swing.JButton But_c_torreA;
    private javax.swing.JTable JT_TorreA;
    private javax.swing.JTable JT_TorreB;
    private javax.swing.JTable JT_TorreC;
    private javax.swing.JLabel Lb_MinMov;
    private javax.swing.JLabel Lb_NumeroMov;
    private javax.swing.JTextField Txt_disco;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
